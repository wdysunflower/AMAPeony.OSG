package com.peony.osg.model.data;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.peony.osg.model.data.DBActivity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table Activity.
*/
public class DBActivityDao extends AbstractDao<DBActivity, Long> {

    public static final String TABLENAME = "Activity";

    /**
     * Properties of entity DBActivity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Type = new Property(2, Integer.class, "type", false, "TYPE");
        public final static Property Status = new Property(3, Integer.class, "status", false, "STATUS");
        public final static Property CreateTime = new Property(4, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property RoadID = new Property(5, Integer.class, "roadID", false, "ROAD_ID");
        public final static Property Strength = new Property(6, Integer.class, "strength", false, "STRENGTH");
        public final static Property Venue = new Property(7, Integer.class, "venue", false, "VENUE");
        public final static Property BeginTime = new Property(8, java.util.Date.class, "beginTime", false, "BEGIN_TIME");
        public final static Property EndTime = new Property(9, java.util.Date.class, "endTime", false, "END_TIME");
        public final static Property Description = new Property(10, String.class, "description", false, "DESCRIPTION");
        public final static Property Images = new Property(11, String.class, "images", false, "IMAGES");
        public final static Property JoinNum = new Property(12, Integer.class, "joinNum", false, "JOIN_NUM");
    };

    private DaoSession daoSession;


    public DBActivityDao(DaoConfig config) {
        super(config);
    }
    
    public DBActivityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'Activity' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NAME' TEXT NOT NULL ," + // 1: name
                "'TYPE' INTEGER," + // 2: type
                "'STATUS' INTEGER," + // 3: status
                "'CREATE_TIME' INTEGER," + // 4: createTime
                "'ROAD_ID' INTEGER," + // 5: roadID
                "'STRENGTH' INTEGER," + // 6: strength
                "'VENUE' INTEGER," + // 7: venue
                "'BEGIN_TIME' INTEGER," + // 8: beginTime
                "'END_TIME' INTEGER," + // 9: endTime
                "'DESCRIPTION' TEXT," + // 10: description
                "'IMAGES' TEXT," + // 11: images
                "'JOIN_NUM' INTEGER);"); // 12: joinNum
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'Activity'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DBActivity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(3, type);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(4, status);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(5, createTime.getTime());
        }
 
        Integer roadID = entity.getRoadID();
        if (roadID != null) {
            stmt.bindLong(6, roadID);
        }
 
        Integer strength = entity.getStrength();
        if (strength != null) {
            stmt.bindLong(7, strength);
        }
 
        Integer venue = entity.getVenue();
        if (venue != null) {
            stmt.bindLong(8, venue);
        }
 
        java.util.Date beginTime = entity.getBeginTime();
        if (beginTime != null) {
            stmt.bindLong(9, beginTime.getTime());
        }
 
        java.util.Date endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(10, endTime.getTime());
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(11, description);
        }
 
        String images = entity.getImages();
        if (images != null) {
            stmt.bindString(12, images);
        }
 
        Integer joinNum = entity.getJoinNum();
        if (joinNum != null) {
            stmt.bindLong(13, joinNum);
        }
    }

    @Override
    protected void attachEntity(DBActivity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DBActivity readEntity(Cursor cursor, int offset) {
        DBActivity entity = new DBActivity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // status
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // createTime
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // roadID
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // strength
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // venue
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // beginTime
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // endTime
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // description
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // images
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12) // joinNum
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DBActivity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setStatus(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setCreateTime(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setRoadID(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setStrength(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setVenue(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setBeginTime(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setEndTime(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setDescription(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setImages(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setJoinNum(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DBActivity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DBActivity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
